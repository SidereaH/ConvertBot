import asyncio
import logging
import mimetypes
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.fsm.storage.memory import MemoryStorage
from pydub import AudioSegment
import sqlite3
from TextToFile import TextToFileClass
import TextToFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
import datetime
from PIL import Image
import PIL
from moviepy.editor import VideoFileClip
import pypandoc
from yoomoney import Quickpay
from yoomoney import Client
import os
import PyPDF2
from config import token, API_TOKEN, card_number

archieve_bot = "https://t.me/ArchieveTool_bot"

client = Client(token)
user = client.account_info()
print("Account number:", user.account)
print("Account balance:", user.balance)
print("Account currency code in ISO 4217 format:", user.currency)
print("Account status:", user.account_status)
print("Account type:", user.account_type)
print("Extended balance information:")
for pair in vars(user.balance_details):
    print("\t-->", pair, ":", vars(user.balance_details).get(pair))
print("Information about linked bank cards:")
cards = user.cards_linked
if len(cards) != 0:
    for card in cards:
        print(card.pan_fragment, " - ", card.type)
else:
    print("No card is linked to the account")
con = sqlite3.connect(
    "lastbdhope.db",
    timeout=5.0,
    detect_types=0,
    isolation_level='DEFERRED',
    check_same_thread=True,
    factory=sqlite3.Connection,
    cached_statements=128,
    uri=False
)

cursor = con.cursor()


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
botuse = Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(storage=storage)

# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='üóÇ–ê—Ä—Ö–∏–≤'),
            KeyboardButton(text='üîÑ–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')
        ],
        [
            # KeyboardButton(text='‚ú®ChatGPT'),
            KeyboardButton(text='üí¨–¢–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª')
        ],
        [
            KeyboardButton(text='‚úÖ–ü–æ–¥–ø–∏—Å–∫–∞')
        ]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
conv_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='üìÑ–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ PDF'),
            KeyboardButton(text='üì∑–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        ],
        [
            KeyboardButton(text='üîä–ê—É–¥–∏–æ'),
            KeyboardButton(text='üé•–í–∏–¥–µ–æ')
        ],
        [
            KeyboardButton(text='üîô–ù–∞–∑–∞–¥')
        ]
    ],
    resize_keyboard=True
)

subscriptions_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='‚ú®1 –¥–µ–Ω—å'),
            KeyboardButton(text='‚≠êÔ∏è30 –¥–Ω–µ–π')
        ],
        [
            KeyboardButton(text='üí´1 –≥–æ–¥')
        ],
        [
            KeyboardButton(text='üîô–ù–∞–∑–∞–¥')
        ]
    ],
    resize_keyboard=True
)
subscriptions_keyboard_oneday = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –¥–µ–Ω—å'),
        ],
        [
            KeyboardButton(text='üîô–ù–∞–∑–∞–¥')
        ]

    ],
    resize_keyboard=True
)
subscriptions_keyboard_month = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π'),
        ],
        [
            KeyboardButton(text='üîô–ù–∞–∑–∞–¥')
        ]

    ],
    resize_keyboard=True
)
subscriptions_keyboard_year = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 365 –¥–Ω–µ–π'),
        ],
        [
            KeyboardButton(text='üîô–ù–∞–∑–∞–¥')
        ]

    ],
    resize_keyboard=True
)

SUPPORTED_FORMATS = ['JPG', 'JPEG', 'PNG', 'BMP', 'GIF', 'TIFF', 'WEBP']
class ConvertImageClass(StatesGroup):
    waiting_for_image = State()
    waiting_for_format = State()


class ConvertVideoClass(StatesGroup):
    waiting_for_video = State()
    waiting_for_format = State()


class ConvertAudioClass(StatesGroup):
    waiting_for_audio = State()
    waiting_for_format = State()


class ConvertOfficeClass(StatesGroup):
    waiting_for_file = State()
    waiting_for_format = State()


class SubscriptionOne(StatesGroup):
    start_buy = State()
    waiting_for_submit = State()
    waiting_for_buy = State()
    waiting_for_successpay = State()


class SubscriptionMonth(StatesGroup):
    start_buy = State()
    waiting_for_submit = State()
    waiting_for_buy = State()
    waiting_for_successpay = State()


class SubscriptionYear(StatesGroup):
    start_buy = State()
    waiting_for_submit = State()
    waiting_for_buy = State()
    waiting_for_successpay = State()


class TextToFileClass(StatesGroup):
    waiting_for_file_info = State()


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞—à –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –º—ã –∑–∞–∫–æ–Ω—á–∏–º —Ä–∞–±–æ—Ç—É!")
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–Ø ToolBot,–≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ–∞–π–ª–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=start_keyboard)
    cursor.execute("""
    Select id From Users
    Where name = ?
    """, (message.from_user.id,))
    result = cursor.fetchone()
    current_time  = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if result == None:
        cursor.execute("""
        Insert into Users(name, CountAction, LastActionTime)
        Values (?, 0, ?)  
         """, (message.from_user.id, current_time,))
        con.commit()
    else:
        print("–≠—Ç–æ—Ç –±—Ä–æ —É–∂–µ –ø–æ–ª–±–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º")


# –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text in ["üóÇ–ê—Ä—Ö–∏–≤", "üîÑ–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", "‚ú®ChatGPT", "üí¨–¢–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª", "‚úÖ–ü–æ–¥–ø–∏—Å–∫–∞",
                                             "üìÑ–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ PDF", "üì∑–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üîä–ê—É–¥–∏–æ", "üé•–í–∏–¥–µ–æ", "üîô–ù–∞–∑–∞–¥",
                                             '‚ú®1 –¥–µ–Ω—å', '‚≠êÔ∏è30 –¥–Ω–µ–π', 'üí´1 –≥–æ–¥', '–•–æ—á—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å',
                                             '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π',
                                             '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 365 –¥–Ω–µ–π', ])
async def handle_button(message: types.Message, state: FSMContext):
    cursor.execute("""
                   SELECT 
                   Users.id, 
                   Users.name,
                   CASE
                       WHEN SubscriptionInformation.sub_id IS NULL THEN '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'
                       WHEN SubscriptionInformation.payed = 0 THEN '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                       WHEN DATETIME(SubscriptionInformation.purchase_date, '+' || SubscriptionInformation.length_days || ' days') >= DATETIME('now') THEN '–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                       ELSE '–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
                   END AS subscription_status
                   FROM Users
                   LEFT JOIN SubscriptionInformation 
                       ON Users.sub_id = SubscriptionInformation.sub_id
                   WHERE Users.name = ?;""", (message.from_user.id,))
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
    payment_state = cursor.fetchone()
    if payment_state  != None:
        if payment_state[2] ==  '–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞':
            cursor.execute("""UPDATE SubscriptionInformation
                                                                            
                                    Set payed=?, payment_number =?
                                    Where payment_number = ?
                                    """, (
                False, (str(message.from_user.id) + f"oneday{current_datetime}expired"),
                (str(message.from_user.id) + f"oneday{current_datetime}")))
    print(str(message.from_user.first_name) + " " + str(message.from_user.id))
    cursor.execute("""
    SELECT 
        (JULIANDAY('now') - JULIANDAY(LastActionTime)) * 24 AS hours_difference
    FROM users
    WHERE name = ?
    """, (str(message.from_user.id),))

    timebtw = cursor.fetchone()
    print(timebtw)
    if timebtw[0]  >=24:
        await message.answer("–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—É–ø–Ω—ã!")
        cursor.execute("""
                                       UPDATE Users
                                       Set CountAction = 0, LastActionTime  =  DATETIME('now')
                                       Where name = ?
                                   """, (message.from_user.id,))
        con.commit()
    if message.text == "üóÇ–ê—Ä—Ö–∏–≤":
        cursor.execute("""
                                        SELECT payed 
                                        FROM SubscriptionInformation
                                        JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
                                        WHERE Users.name = ?
                                    """, (message.from_user.id,))
        try:
            payment_state = cursor.fetchone()
            print(payment_state)
        except Exception:
            print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            payment_state = None
        if payment_state == None or payment_state[0] == 0:
            cursor.execute("""
                                    Select CountAction From Users
                                    Where name = ?
                                    """, (message.from_user.id,))
            countact = cursor.fetchone()
            print(countact)
            print(countact[0])
            if countact[0] <= 10:
                await message.reply(f"–î–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –≤—Ç–æ—Ä—ã–º –±–æ—Ç–æ–º {archieve_bot}")
            else:
                await message.reply(
                    "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –±–æ—Ç –¥–ª—è –≤–∞—Å —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await message.reply(f"–î–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –≤—Ç–æ—Ä—ã–º –±–æ—Ç–æ–º {archieve_bot}")


    elif message.text == "üîÑ–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", reply_markup=conv_keyboard)
    # elif message.text == "‚ú®ChatGPT":
    #     await message.reply("Coming soon...\n/start")
    elif message.text == "üí¨–¢–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É:\nfile.txt\nHello world!")
        await state.set_state(TextToFileClass.waiting_for_file_info)
    elif message.text == "‚úÖ–ü–æ–¥–ø–∏—Å–∫–∞":
        await message.reply("–ö—Ä–∞—Å–∞–≤–∞, –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ –º—ã –∫—É–ø–∏–º –ø–æ–∫—É—à–∞—Ç—å", reply_markup=subscriptions_keyboard)
    elif message.text == "üìÑ–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ PDF":
        cursor.execute("""
                        SELECT payed 
                        FROM SubscriptionInformation
                        JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
                        WHERE Users.name = ?
                    """, (message.from_user.id,))
        try:
            payment_state = cursor.fetchone()
            print(payment_state)
        except Exception:
            print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            payment_state = None
        if payment_state == None or payment_state[0] == 0:
            cursor.execute("""
                    Select CountAction From Users
                    Where name = ?
                    """, (message.from_user.id,))
            countact = cursor.fetchone()

            if countact[0] <= 10:
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ PDF")
                await state.set_state(ConvertOfficeClass.waiting_for_file)
            else:
                await message.reply(
                    "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –±–æ—Ç –¥–ª—è –≤–∞—Å —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF")
            await state.set_state(ConvertOfficeClass.waiting_for_file)


    elif message.text == "üì∑–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
        cursor.execute("""
                                SELECT payed 
                                FROM SubscriptionInformation
                                JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
                                WHERE Users.name = ?
                            """, (message.from_user.id,))
        try:
            payment_state = cursor.fetchone()
            print(payment_state)
        except Exception:
            print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            payment_state = None
        if payment_state == None or payment_state[0] == 0:
            cursor.execute("""
                            Select CountAction From Users
                            Where name = ?
                            """, (message.from_user.id,))
            countact = cursor.fetchone()

            if countact[0] <= 10:
                cursor.execute("""
                
                """)
                await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                await state.set_state(ConvertImageClass.waiting_for_image)
            else:
                await message.reply(
                    "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –±–æ—Ç –¥–ª—è –≤–∞—Å —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await state.set_state(ConvertImageClass.waiting_for_image)

    elif message.text == "üîä–ê—É–¥–∏–æ":
        cursor.execute("""
                        SELECT payed 
                        FROM SubscriptionInformation
                        JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
                        WHERE Users.name = ?
                    """, (message.from_user.id,))
        try:
            payment_state = cursor.fetchone()
            print(payment_state)
        except Exception:
            print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            payment_state = None
        if payment_state == None or payment_state[0] == 0:
            cursor.execute("""
                    Select CountAction From Users
                    Where name = ?
                    """, (message.from_user.id,))
            countact = cursor.fetchone()
            if countact[0] <= 10:
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
                await state.set_state(ConvertAudioClass.waiting_for_audio)
            else:
                await message.reply(
                    "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –±–æ—Ç –¥–ª—è –≤–∞—Å —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
            await state.set_state(ConvertAudioClass.waiting_for_audio)
    elif message.text == "üé•–í–∏–¥–µ–æ":
        cursor.execute("""
                SELECT payed 
                FROM SubscriptionInformation
                JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
                WHERE Users.name = ?
            """, (message.from_user.id,))
        try:
            payment_state = cursor.fetchone()
            print(payment_state)
        except Exception:
            print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            payment_state = None
        if payment_state == None or payment_state[0] == 0:
            cursor.execute("""
            Select CountAction From Users
            Where name = ?
            """, (message.from_user.id,))
            countact = cursor.fetchone()

            if countact[0] <= 10:
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")
                await state.set_state(ConvertVideoClass.waiting_for_video)
            else:
                await message.reply(
                    "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –±–æ—Ç –¥–ª—è –≤–∞—Å —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")
            await state.set_state(ConvertVideoClass.waiting_for_video)


    elif message.text == "üîô–ù–∞–∑–∞–¥":
        await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=start_keyboard)
    elif message.text == '‚ú®1 –¥–µ–Ω—å':
        print(message.from_user.first_name + " —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å")
        Submit = ["–•–æ—á—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await message.reply(f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
                            reply_markup=keyboard)
        await state.set_state(SubscriptionOne.waiting_for_submit)
    elif message.text == '‚≠êÔ∏è30 –¥–Ω–µ–π':
        print(message.from_user.first_name + " —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π")
        Submit = ["–•–æ—á—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await message.reply(f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
                            reply_markup=keyboard)
        await state.set_state(SubscriptionMonth.waiting_for_submit)
    elif message.text == 'üí´1 –≥–æ–¥':
        print(message.from_user.first_name + " —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–æ–¥")
        Submit = ["–•–æ—á—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 365 –¥–Ω–µ–π"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await message.reply(f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
                            reply_markup=keyboard)
        await state.set_state(SubscriptionYear.waiting_for_submit)


# –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–µ–Ω—å
@dp.callback_query(StateFilter(SubscriptionOne.waiting_for_submit))
async def want_oneday_sub(callback_query: types.CallbackQuery, state: FSMContext):
    print ("–ø–µ—Ä–µ—à–µ–ª –∫ –æ–ø–ª–∞—Ç–µ")
    cursor.execute("""
        SELECT payed 
        FROM SubscriptionInformation
        JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
        WHERE Users.name = ?
    """, (callback_query.from_user.id,))  ##–ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É –Ω–µ–≥–æ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è)
    try:
        payment_state = cursor.fetchone()
        print(payment_state)
    except Exception:
        payment_state = None

    if payment_state == None:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ –±–¥ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")


        quickpay = Quickpay(
            receiver="4100118722189049",
            quickpay_form="shop",
            targets="Sponsor this project",
            paymentType="SB",
            sum=3,
            label=f"{str(callback_query.from_user.id)}oneday{current_datetime}",
        )
        print(quickpay.label)
        print(callback_query.from_user.id)

        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        usernow = [1, False, 1, current_datetime, str(quickpay.label)]

        cursor.execute("""
             INSERT INTO SubscriptionInformation
             (type_id, payed, length_days, purchase_date, payment_number)
             VALUES (?,?,?,?,?)
         """, usernow)
        # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        cursor.execute("""
        Select sub_id
        from SubscriptionInformation
        where payment_number = ?""", ((str(quickpay.label)),))
        sub_id = cursor.fetchone()[0]
        print(sub_id)
        # print(sub_id[0])
        subscription = str(sub_id)
        user = [subscription, callback_query.from_user.id, ]
        cursor.execute("""
            Update Users 
            Set sub_id = ?
            Where  name  = ?
        """, user)
        con.commit()
        print(quickpay.base_url)
        Submit = ["–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id,
                                  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 49 —Ä—É–±–ª–µ–π. \n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏'",
                                  reply_markup=keyboard)

        await state.set_state(SubscriptionOne.waiting_for_successpay)

    elif payment_state[0] == 0:
        # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞
        cursor.execute("""SELECT payment_number From SubscriptionInformation
                Join Users on Users.sub_id = SubscriptionInformation.sub_id
                Where Users.name = ?""", (callback_query.from_user.id,))
        paynum = cursor.fetchall()
        print(paynum)
        quickpay = Quickpay(
            receiver="4100118722189049",
            quickpay_form="shop",
            targets="Sponsor this project",
            paymentType="SB",
            sum=3,
            label=f"{paynum[0]}",
        )
        print(quickpay.label)
        print(callback_query.from_user.id)
        Submit = ["–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id,
                                  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 49 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!'",
                                  reply_markup=keyboard)
        await state.set_state(SubscriptionOne.waiting_for_successpay)
    else:
        cursor.execute("""
                SELECT 
                Users.id, 
                Users.name,
                CASE
                    WHEN SubscriptionInformation.sub_id IS NULL THEN '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'
                    WHEN SubscriptionInformation.payed = 0 THEN '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                    WHEN DATETIME(SubscriptionInformation.purchase_date, '+' || SubscriptionInformation.length_days || ' days') >= DATETIME('now') THEN '–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                    ELSE '–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
                END AS subscription_status
                FROM Users
                LEFT JOIN SubscriptionInformation 
                    ON Users.sub_id = SubscriptionInformation.sub_id
                WHERE Users.name = ?;""", (callback_query.from_user.id,))

        payment_state = cursor.fetchone()
        if payment_state != None:
            if payment_state[2] == "–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞":
                current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
                cursor.execute("""UPDATE SubscriptionInformation
                                                                    Set payed=?, payment_number =?
                                                                    Where payment_number = ?
                                                                """, (
                    False, (str(callback_query.from_user.id) + f"oneday{current_datetime}expired"),
                    (str(callback_query.from_user.id) + f"oneday{current_datetime}")))

                # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                con.commit()
                await botuse.send_message(callback_query.from_user.id,
                                          f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å")
                quickpay = Quickpay(
                    receiver="4100118722189049",
                    quickpay_form="shop",
                    targets="Sponsor this project",
                    paymentType="SB",
                    sum=49,
                    label=f"{callback_query.from_user.id}oneday"
                )
                print(quickpay.label)
                print(callback_query.from_user.id)
                Submit = ["–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏"]
                buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
                await botuse.send_message(callback_query.from_user.id,
                                          f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 49 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!'",
                                          reply_markup=keyboard)
                await state.set_state(SubscriptionOne.waiting_for_successpay)

            elif payment_state[2] == "–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞":
                await botuse.send_message(callback_query.from_user.id,
                                          f"–°–ø–∞—Å–∏–±–æ, –Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! \nC –ª—é–±–æ–≤—å—é, The Coders‚ù§Ô∏è")

    # await state.set_state(SubscriptionOne.waiting_for_buy)


@dp.callback_query(StateFilter(SubscriptionOne.waiting_for_successpay))
async def check_one_day_payment(callback_query: types.CallbackQuery, state: FSMContext):
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂")
    print(callback_query.from_user.id)
    cursor.execute("""SELECT payment_number From SubscriptionInformation
    Join Users on Users.sub_id = SubscriptionInformation.sub_id
    Where Users.name = ?""", (callback_query.from_user.id,))
    payment = cursor.fetchone()
    client = Client(token)

    history = client.operation_history(label=f"{payment[0]}")
    print(history)
    print("List of operations:")
    print("Next page starts with: ", history.next_record)
    status = None

    for operation in history.operations:
        print()
        print("Operation:", operation.operation_id)
        print("\tStatus     -->", operation.status)
        print("\tDatetime   -->", operation.datetime)
        print("\tTitle      -->", operation.title)
        print("\tPattern id -->", operation.pattern_id)
        print("\tDirection  -->", operation.direction)
        print("\tAmount     -->", operation.amount)
        print("\tLabel      -->", operation.label)
        print("\tType       -->", operation.type)
        if(datetime.datetime.now() - operation.datetime)*24 >= datetime.timedelta(hours=24) :
            if operation.status == "success":
                status = str(operation.status)

    if (status == "success"):
        print("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!")
        # –≤—ã–¥–∞–µ–º —é–∑–µ—Ä—É –ø–æ–¥–ø–∏—Å–∫—É
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
        # –û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï –í –ë–î –û –ü–û–î–ü–ò–°–ö–ï –Æ–ó–ï–†–ê
        cursor.execute("""
                    UPDATE SubscriptionInformation
                    Set payed=?, purchase_date = ?
                    Where payment_number = ?
                """, (True, current_datetime, payment[0],))
        # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        await botuse.send_message(callback_query.from_user.id,
                                  "–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, \nC –ª—é–±–æ–≤—å—é, The Coders‚ù§Ô∏è")
    else:
        print("–ù–µ –ø—Ä–æ—à–ª–∞")
        Submit = ["–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞", reply_markup=keyboard)


# –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü
@dp.callback_query(StateFilter(SubscriptionMonth.waiting_for_submit))
async def want_oneday_sub(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute("""
        SELECT payed 
        FROM SubscriptionInformation
        JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
        WHERE Users.name = ?
    """, (callback_query.from_user.id,))  ##–ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É –Ω–µ–≥–æ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è)

    try:
        payment_state = cursor.fetchone()

    except Exception:
        print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        payment_state = None

    if payment_state == None:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ –±–¥ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
        print("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥ –∏–ª–∏ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª –∑–∞—è–≤–∫—É")
        quickpay = Quickpay(
            receiver="4100118722189049",
            quickpay_form="shop",
            targets="Sponsor this project",
            paymentType="SB",
            sum=299,
            label=f"{str(callback_query.from_user.id)}month{current_datetime}"
        )
        print(quickpay.label)
        print(callback_query.from_user.id)
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        usernow = [2, False, 30, current_datetime, str(quickpay.label)]

        cursor.execute("""
             INSERT INTO SubscriptionInformation
             (type_id, payed, length_days, purchase_date, payment_number)
             VALUES (?,?,?,?,?)
         """, usernow)
        # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        cursor.execute("""
        Select sub_id
        from SubscriptionInformation
        where payment_number = ?""", ((str(quickpay.label)),))
        sub_id = cursor.fetchone()[0]
        print(sub_id)
        # print(sub_id[0])
        subscription = str(sub_id)
        user = [subscription, callback_query.from_user.id, ]
        cursor.execute("""
                    Update Users 
                    Set sub_id = ?
                    Where  name  = ?
                """, user)
        con.commit()
        print(quickpay.base_url)
        Submit = ["–û–ø–ª–∞—Ç–∏–ª –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id,
                                  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 299 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏'",
                                  reply_markup=keyboard)

        await state.set_state(SubscriptionMonth.waiting_for_successpay)


    elif payment_state[0] == 0:
        # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞
        cursor.execute("""SELECT payment_number From SubscriptionInformation
                        Join Users on Users.sub_id = SubscriptionInformation.sub_id
                        Where Users.name = ?""", (callback_query.from_user.id,))
        paynum = cursor.fetchall()
        print(paynum)
        quickpay = Quickpay(
            receiver="4100118722189049",
            quickpay_form="shop",
            targets="Sponsor this project",
            paymentType="SB",
            sum=299,
            label=f"{paynum[0]}",
        )
        print(quickpay.label)
        print(callback_query.from_user.id)
        Submit = ["–û–ø–ª–∞—Ç–∏–ª –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id,
                                  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 299 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏!'",
                                  reply_markup=keyboard)
        await state.set_state(SubscriptionMonth.waiting_for_successpay)
    else:
        cursor.execute("""
                        SELECT 
                        Users.id, 
                        Users.name,
                        CASE
                            WHEN SubscriptionInformation.sub_id IS NULL THEN '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'
                            WHEN SubscriptionInformation.payed = 0 THEN '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                            WHEN DATETIME(SubscriptionInformation.purchase_date, '+' || SubscriptionInformation.length_days || ' days') >= DATETIME('now') THEN '–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                            ELSE '–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
                        END AS subscription_status
                        FROM Users
                        LEFT JOIN SubscriptionInformation 
                            ON Users.sub_id = SubscriptionInformation.sub_id
                        WHERE Users.name = ?;""", (callback_query.from_user.id,))

        payment_state = cursor.fetchone()
        if payment_state != None:
            if payment_state[2] == "–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞":
                current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
                cursor.execute("""UPDATE SubscriptionInformation
                                                                    Set payed=?, payment_number =?
                                                                    Where payment_number = ?
                                                                """, (
                    False, (str(callback_query.from_user.id) + f"month{current_datetime}expired"),
                    (str(callback_query.from_user.id) + f"month{current_datetime}")))

                # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                con.commit()
                await botuse.send_message(callback_query.from_user.id,
                                          f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å")
                current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
                quickpay = Quickpay(
                    receiver="4100118722189049",
                    quickpay_form="shop",
                    targets="Sponsor this project",
                    paymentType="SB",
                    sum=299,
                    label=f"{callback_query.from_user.id}month{current_datetime}"
                )
                print(quickpay.label)
                print(callback_query.from_user.id)
                Submit = ["–û–ø–ª–∞—Ç–∏–ª –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏"]
                buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
                await botuse.send_message(callback_query.from_user.id,
                                          f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 299 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!'",
                                          reply_markup=keyboard)
                await state.set_state(SubscriptionMonth.waiting_for_successpay)

            elif payment_state[2] == "–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞":
                await botuse.send_message(callback_query.from_user.id,
                                          f"–°–ø–∞—Å–∏–±–æ, –Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! \nC –ª—é–±–æ–≤—å—é, The Coders‚ù§Ô∏è")

    # await state.set_state(SubscriptionOne.waiting_for_buy)


@dp.callback_query(StateFilter(SubscriptionMonth.waiting_for_successpay))
async def check_one_day_payment(callback_query: types.CallbackQuery, state: FSMContext):
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂")
    print(callback_query.from_user.id)
    cursor.execute("""SELECT payment_number From SubscriptionInformation
        Join Users on Users.sub_id = SubscriptionInformation.sub_id
        Where Users.name = ?""", (callback_query.from_user.id,))
    payment = cursor.fetchone()
    client = Client(token)

    history = client.operation_history(label=f"{payment[0]}")
    print(history)
    print("List of operations:")
    print("Next page starts with: ", history.next_record)
    status = None
    for operation in history.operations:
        print()
        print("Operation:", operation.operation_id)
        print("\tStatus     -->", operation.status)
        print("\tDatetime   -->", operation.datetime)
        print("\tTitle      -->", operation.title)
        print("\tPattern id -->", operation.pattern_id)
        print("\tDirection  -->", operation.direction)
        print("\tAmount     -->", operation.amount)
        print("\tLabel      -->", operation.label)
        print("\tType       -->", operation.type)
        if (datetime.datetime.now() - operation.datetime) * 24 >= datetime.timedelta(days=30):
            if operation.status == "success":
                status = str(operation.status)

    if (status == "success"):
        print("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!")
        # –≤—ã–¥–∞–µ–º —é–∑–µ—Ä—É –ø–æ–¥–ø–∏—Å–∫—É
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
        # –û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï –í –ë–î –û –ü–û–î–ü–ò–°–ö–ï –Æ–ó–ï–†–ê
        cursor.execute("""
                        UPDATE SubscriptionInformation
                        Set payed=?, purchase_date = ?
                        Where payment_number = ?
                    """, (True, current_datetime, payment[0],))
        # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        await botuse.send_message(callback_query.from_user.id,
                                  "–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. \nC –ª—é–±–æ–≤—å—é, The Coders‚ù§Ô∏è")
    else:
        print("–ù–µ –ø—Ä–æ—à–ª–∞")
        Submit = ["–û–ø–ª–∞—Ç–∏–ª –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞", reply_markup=keyboard)


# –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥
@dp.callback_query(StateFilter(SubscriptionYear.waiting_for_submit))
async def want_oneday_sub(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute("""
        SELECT payed 
        FROM SubscriptionInformation
        JOIN Users ON SubscriptionInformation.sub_id = Users.sub_id
        WHERE Users.name = ?
    """, (callback_query.from_user.id,))  ##–ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É –Ω–µ–≥–æ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è)
    try:
        payment_state = cursor.fetchone()
        print(payment_state)
    except Exception:
        print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        payment_state = None

    if payment_state == None:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ –±–¥ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è
        print("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥ –∏–ª–∏ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª –∑–∞—è–≤–∫—É")
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
        quickpay = Quickpay(
            receiver="4100118722189049",
            quickpay_form="shop",
            targets="Sponsor this project",
            paymentType="SB",
            sum=799,
            label=f"{str(callback_query.from_user.id)}year{current_datetime}"
        )
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        usernow = [3, False, 365, current_datetime, str(quickpay.label)]

        cursor.execute("""
             INSERT INTO SubscriptionInformation
             (type_id, payed, length_days, purchase_date, payment_number)
             VALUES (?,?,?,?,?)
         """, usernow)
        # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        cursor.execute("""
        Select sub_id
        from SubscriptionInformation
        where payment_number = ?""", ((str(quickpay.label)),))
        sub_id = cursor.fetchone()[0]
        print(sub_id)
        # print(sub_id[0])
        subscription = str(sub_id)
        user = [subscription, callback_query.from_user.id, ]
        cursor.execute("""
                    Update Users 
                    Set sub_id = ?
                    Where  name  = ?
                """, user)
        con.commit()
        print(quickpay.base_url)
        Submit = ["–û–ø–ª–∞—Ç–∏–ª –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id,
                                  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–æ–¥ –∑–∞ 799 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª 1 –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏'",
                                  reply_markup=keyboard)

        await state.set_state(SubscriptionYear.waiting_for_successpay)

    elif payment_state[0] == 0:
        cursor.execute("""SELECT payment_number From SubscriptionInformation
                        Join Users on Users.sub_id = SubscriptionInformation.sub_id
                        Where Users.name = ?""", (callback_query.from_user.id,))
        paynum = cursor.fetchall()
        print(paynum)
        quickpay = Quickpay(
            receiver="4100118722189049",
            quickpay_form="shop",
            targets="Sponsor this project",
            paymentType="SB",
            sum=799,
            label=f"{paynum[0]}",
        )
        print(quickpay.label)
        print(callback_query.from_user.id)
        Submit = ["–û–ø–ª–∞—Ç–∏–ª –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id,
                                  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–æ–¥ –∑–∞ 799 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ö–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª!'",
                                  reply_markup=keyboard)
        await state.set_state(SubscriptionYear.waiting_for_successpay)
    else:
        cursor.execute("""
                        SELECT 
                        Users.id, 
                        Users.name,
                        CASE
                            WHEN SubscriptionInformation.sub_id IS NULL THEN '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'
                            WHEN SubscriptionInformation.payed = 0 THEN '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                            WHEN DATETIME(SubscriptionInformation.purchase_date, '+' || SubscriptionInformation.length_days || ' days') >= DATETIME('now') THEN '–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
                            ELSE '–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
                        END AS subscription_status
                        FROM Users
                        LEFT JOIN SubscriptionInformation 
                            ON Users.sub_id = SubscriptionInformation.sub_id
                        WHERE Users.name = ?;""", (callback_query.from_user.id,))

        payment_state = cursor.fetchone()
        if payment_state != None:
            if payment_state[2] == "–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞":
                current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
                cursor.execute("""UPDATE SubscriptionInformation
                                                    Set payed=?, payment_number =?
                                                    Where payment_number = ?
                                                """, (
                False, (str(callback_query.from_user.id) + f"year{current_datetime}expired"),
                (str(callback_query.from_user.id) + f"year{current_datetime}")))

                # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                con.commit()
                await botuse.send_message(callback_query.from_user.id,
                                          f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å")
                current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
                quickpay = Quickpay(
                    receiver="4100118722189049",
                    quickpay_form="shop",
                    targets="Sponsor this project",
                    paymentType="SB",
                    sum=799,
                    label=f"{callback_query.from_user.id}year{current_datetime}"
                )
                print(quickpay.label)
                print(callback_query.from_user.id)
                Submit = ["–û–ø–ª–∞—Ç–∏–ª –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏"]
                buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
                await botuse.send_message(callback_query.from_user.id,
                                          f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–æ–¥ –∑–∞ 799 —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n {quickpay.base_url} \n –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!'",
                                          reply_markup=keyboard)
                await state.set_state(SubscriptionYear.waiting_for_successpay)

            elif payment_state[2] == "–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞":
                await botuse.send_message(callback_query.from_user.id,
                                          f"–°–ø–∞—Å–∏–±–æ, –Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! \nC –ª—é–±–æ–≤—å—é, The Coders‚ù§Ô∏è")

    # await state.set_state(SubscriptionOne.waiting_for_buy)


@dp.callback_query(StateFilter(SubscriptionYear.waiting_for_successpay))
async def check_one_day_payment(callback_query: types.CallbackQuery, state: FSMContext):
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂")
    print(callback_query.from_user.id)
    cursor.execute("""SELECT payment_number From SubscriptionInformation
    Join Users on Users.sub_id = SubscriptionInformation.sub_id
    Where Users.name = ?""", (callback_query.from_user.id,))
    payment = cursor.fetchone()
    client = Client(token)
    history = client.operation_history(label=f"{payment[0]}")
    print(history)
    print("List of operations:")
    print("Next page starts with: ", history.next_record)
    status = None
    for operation in history.operations:
        print()
        print("Operation:", operation.operation_id)
        print("\tStatus     -->", operation.status)
        print("\tDatetime   -->", operation.datetime)
        print("\tTitle      -->", operation.title)
        print("\tPattern id -->", operation.pattern_id)
        print("\tDirection  -->", operation.direction)
        print("\tAmount     -->", operation.amount)
        print("\tLabel      -->", operation.label)
        print("\tType       -->", operation.type)
        if (datetime.datetime.now() - operation.datetime) * 24 >= datetime.timedelta(days=365):
            if operation.status == "success":
                status = str(operation.status)
    if (status == "success"):
        print("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!")
        # –≤—ã–¥–∞–µ–º —é–∑–µ—Ä—É –ø–æ–¥–ø–∏—Å–∫—É
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
        # –û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï –í –ë–î –û –ü–û–î–ü–ò–°–ö–ï –Æ–ó–ï–†–ê
        cursor.execute("""
                    UPDATE SubscriptionInformation
                    Set payed=?, purchase_date = ?
                    Where payment_number = ?
                """, (True, current_datetime, payment[0],))
        # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        await botuse.send_message(callback_query.from_user.id,
                                  "–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ü–µ–ª—ã–π –≥–æ–¥! –ü—Ä—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. \nC –ª—é–±–æ–≤—å—é, The Coders‚ù§Ô∏è")
    else:
        Submit = ["–û–ø–ª–∞—Ç–∏–ª –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏"]
        buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in Submit]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await botuse.send_message(callback_query.from_user.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞", reply_markup=keyboard)


@dp.message(StateFilter(TextToFileClass.waiting_for_file_info))
async def handle_text_to_file(message: types.Message, state: FSMContext):
    await TextToFile.handle_text_to_file(message, state)
    await state.clear()


@dp.message(StateFilter(ConvertImageClass.waiting_for_image))
async def handle_image(message: types.Message, state: FSMContext):
    if not message.photo and not message.document:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    if message.photo:

        file_id = message.photo[-1].file_id
        file = await botuse.get_file(file_id)
        file_path = file.file_path
        mime_type = mimetypes.guess_type(file_path)[0]
        extension = mime_type.split('/')[-1] if mime_type else 'unknown'
    else:
        file_id = message.document.file_id
        file = await botuse.get_file(file_id)
        file_path = file.file_path
        mime_type = mimetypes.guess_type(file_path)[0]
        extension = mime_type.split('/')[-1] if mime_type else 'unknown'
    if extension.upper() not in SUPPORTED_FORMATS:
        await message.reply("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -" + extension)
        os.remove(file_path)
        return
    await state.update_data(file_id=file_id, extension=extension)

    buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in SUPPORTED_FORMATS]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {extension}):", reply_markup=keyboard)
    await state.set_state(ConvertImageClass.waiting_for_format)


@dp.callback_query(StateFilter(ConvertImageClass.waiting_for_format))
async def convert_image(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute("""
                               UPDATE Users
                               Set CountAction = CountAction + 1
                               Where name = ?
                           """, (callback_query.from_user.id,))
    con.commit()
    format = callback_query.data.upper()
    data = await state.get_data()
    file_id = data['file_id']

    file = await botuse.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await botuse.download_file(file_path)

    img = PIL.Image.open(downloaded_file)
    output_path = f"converted_image{file_id}.{format.lower()}"
    img.save(output_path, format=format)

    await botuse.send_document(callback_query.from_user.id, FSInputFile(output_path))
    os.remove(output_path)
    await state.clear()


@dp.message(lambda message: message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def start_image_conversion(message: types.Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    await state.set_state(ConvertImageClass.waiting_for_image)


# video converting
SUPPORTED_VIDEO_FORMATS = ['MP4', 'AVI', 'MKV', 'WMV']


@dp.message(StateFilter(ConvertVideoClass.waiting_for_video))
async def handle_video(message: types.Message, state: FSMContext):
    if not message.video and not message.document and not message.video_note:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
        return
    if message.video:
        file_id = message.video.file_id
    elif message.document:
        file_id = message.document.file_id
    else:
        file_id = message.video_note.file_id
    file = await botuse.get_file(file_id)
    file_path = file.file_path
    extension = os.path.splitext(file_path)[1][1:].lower()
    if extension.upper() not in SUPPORTED_VIDEO_FORMATS:
        await message.reply(f"–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ - {extension}")
        os.remove(file_path)
        return
    await state.update_data(file_id=file_id, extension=extension)

    buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in SUPPORTED_VIDEO_FORMATS]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {extension}):", reply_markup=keyboard)
    await state.set_state(ConvertVideoClass.waiting_for_format)


@dp.callback_query(StateFilter(ConvertVideoClass.waiting_for_format))
async def convert_video(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute("""
                           UPDATE Users
                           Set CountAction = CountAction + 1
                           Where name = ?
                       """, (callback_query.from_user.id,))
    con.commit()
    format = callback_query.data.upper()
    data = await state.get_data()
    file_id = data['file_id']

    file = await botuse.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await botuse.download_file(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º BytesIO –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmp_file_path = f"tmp_video_file{file_id}." + data['extension']
    with open(tmp_file_path, "wb") as tmp_file:
        tmp_file.write(downloaded_file.getbuffer())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º moviepy
    video_clip = VideoFileClip(tmp_file_path)
    output_path = f"converted_video{file_id}.{format.lower()}"

    if format.lower() == "mp4":
        video_clip.write_videofile(output_path, codec="libx264", audio_codec="aac")
    elif format.lower() == "mkv" or format.lower() == "wmv" or format.lower() == "avi":
        video_clip.write_videofile(output_path, codec="libvpx", audio_codec="aac")
    else:
        video_clip.write_videofile(output_path, codec=f"{format.lower()}")

    await botuse.send_document(callback_query.from_user.id, FSInputFile(output_path))
    os.remove(output_path)
    os.remove(tmp_file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await state.clear()


# –∞—É–¥–∏–æ
SUPPORTED_AUDIO_FORMATS = ['MP3', 'WAV', 'OGG', 'FLAC', 'AAC', 'OGA']
@dp.message(StateFilter(ConvertAudioClass.waiting_for_audio))
async def handle_audio(message: types.Message, state: FSMContext):
    if not message.audio and not message.voice and not message.document:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
        return
    if message.audio:
        file_id = message.audio.file_id
    elif message.voice:
        file_id = message.voice.file_id
    else:
        file_id = message.document.file_id
    file = await botuse.get_file(file_id)
    file_path = file.file_path
    extension = os.path.splitext(file_path)[1][1:].lower()
    if extension.upper() not in SUPPORTED_AUDIO_FORMATS:
        await message.reply("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ - " + extension.lower())
        os.remove(file_path)
        return
    await state.update_data(file_id=file_id, extension=extension)

    buttons = [InlineKeyboardButton(text=fmt, callback_data=fmt.lower()) for fmt in SUPPORTED_AUDIO_FORMATS]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {extension}):", reply_markup=keyboard)
    await state.set_state(ConvertAudioClass.waiting_for_format)


@dp.callback_query(StateFilter(ConvertAudioClass.waiting_for_format))
async def convert_audio(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute("""
                              UPDATE Users
                              Set CountAction = CountAction + 1
                              Where name = ?
                          """, (callback_query.from_user.id,))
    con.commit()
    format = callback_query.data.upper()
    data = await state.get_data()
    file_id = data['file_id']

    file = await botuse.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await botuse.download_file(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º BytesIO –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmp_file_path = f"tmp_audio_file{file_id}." + data['extension']
    with open(tmp_file_path, "wb") as tmp_file:
        tmp_file.write(downloaded_file.getbuffer())
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pydub
    audio = AudioSegment.from_file(tmp_file_path)
    output_path = f"converted_audio{file_id}.{format.lower()}"
    audio.export(output_path, format=format.lower())

    await callback_query.answer()
    if format.lower()  == "oga":
        await botuse.send_audio(callback_query.from_user.id, FSInputFile(output_path))
    else:
        await botuse.send_document(callback_query.from_user.id, FSInputFile(output_path))
    os.remove(output_path)
    os.remove(tmp_file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await state.clear()


@dp.message(lambda message: message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
async def start_audio_conversion(message: types.Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    await state.set_state(ConvertAudioClass.waiting_for_audio)


@dp.message(lambda message: message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
async def start_video_conversion(message: types.Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    await state.set_state(ConvertVideoClass.waiting_for_video)


# –∫–æ–Ω–≤ –≤ –ø–¥—Ñ
SUPPORTED_OFFICE_FORMATS = ['DOCX']


@dp.message(StateFilter(ConvertOfficeClass.waiting_for_file))
async def handle_office_file(message: types.Message, state: FSMContext):
    if not message.document:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª DOCX, PPTX –∏–ª–∏ XLS.")
        return

    file_id = message.document.file_id
    file = await botuse.get_file(file_id)
    file_path = file.file_path
    extension = os.path.splitext(file_path)[1][1:].upper()

    if extension not in SUPPORTED_OFFICE_FORMATS:
        await message.reply(
            f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_OFFICE_FORMATS)}")
        os.remove(file_path)
        return

    await state.update_data(file_id=file_id, extension=extension)
    await state.set_state(ConvertOfficeClass.waiting_for_format)

    buttons = [InlineKeyboardButton(text="PDF", callback_data="pdf")]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (PDF)", reply_markup=keyboard)


@dp.callback_query(StateFilter(ConvertOfficeClass.waiting_for_format))
async def convert_office_file(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute("""
                              UPDATE Users
                              Set CountAction = CountAction + 1
                              Where name = ?
                          """, (callback_query.from_user.id,))
    con.commit()
    data = await state.get_data()
    file_id = data['file_id']
    extension = data['extension']

    file = await botuse.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await botuse.download_file(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º BytesIO –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmp_file_path = f"tmp_office_file{file_id}.{extension.lower()}"
    with open(tmp_file_path, "wb") as tmp_file:
        tmp_file.write(downloaded_file.getbuffer())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PDF
    output_path = f"converted_file{file_id}.pdf"
    f = open(output_path, "a+")
    f.close()
    # if extension.upper() == "PPTX":
    #     presentation = pptx.Presentation(tmp_file_path)
    #     presentation.save(output_path, pptx.util.PresentationWriter().write)
    if extension.upper() == "DOCX":

        pypandoc.convert_file(tmp_file_path, 'pdf', outputfile=output_path)

    elif extension.upper() == "PPTX":
        # List To Delete All The Individual ".pdf" Files
        EOF_MARKER = b'%%EOF'
        dellst = []
        with open(tmp_file_path,  "rb") as f:
            contents  =  f.read()
        if EOF_MARKER in contents:
            contents  =  contents.replace(EOF_MARKER, b'')
            contents  =  contents + EOF_MARKER
        else:
            # Some files really don't have an EOF marker
            # In this case it helped to manually review the end of the file
            print(contents[-8:])  # see last characters at the end of the file
            # printed b'\n%%EO%E'
            contents = contents[:-6] + EOF_MARKER

        with open(tmp_file_path, 'wb') as f:
            f.write(contents)
        merger = PyPDF2.PdfFileMerger()
        # Loop To Gather All ".pdf" Files In The inputflder
        merger.append(tmp_file_path)
        dellst.append(tmp_file_path)
        dellst.append(contents)
        # Will Merge All The PDFs
        merger.write(f"{output_path}.pdf")
        merger.close()
        # Will Delete The Individual PDFs
        for file in dellst:
            os.remove(file)
    elif extension.upper() == "XLSX":
        pypandoc.convert(tmp_file_path, output_path)
    await state.clear()
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback_query
    await botuse.send_document(callback_query.from_user.id, FSInputFile(output_path))
    os.remove(output_path)
    os.remove(tmp_file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await state.clear()


@dp.message(lambda message: message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ–∏—Å–Ω—ã–π —Ñ–∞–π–ª")
async def start_office_conversion(message: types.Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª DOCX –∏–ª–∏ PPTX –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    await state.set_state(ConvertOfficeClass.waiting_for_file)


async def main():
    await dp.start_polling(botuse)


if __name__ == "__main__":
    asyncio.run(main())

# async def handle_text_to_file(message: types.Message, state: FSMContext):
#     try:
#         # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ç–µ–∫—Å—Ç
#         file_info = message.text.split('\n', 1)
#         if len(file_info) != 2:
#             await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É:\nfile.txt\nHello world!")
#             await state.set_state(TextToFileClass.waiting_for_file_info)
#             return
#         file_name, file_content = file_info
#
#         # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –∏–º–µ–Ω–∏
#         file_extension = os.path.splitext(file_name)[1].lower()
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
#         if not file_name or not file_content:
#             await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É:\nfile.txt\nHello world!")
#             await state.set_state(TextToFileClass.waiting_for_file_info)
#             await state.clear()
#             return
#
#         # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
#         if file_extension == ".docx":
#             # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º DOCX —Ñ–∞–π–ª
#             doc = Document()
#             doc.add_paragraph(file_content)
#             file_path = file_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
#             doc.save(file_path)
#             await message.reply(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω —Ç–µ–∫—Å—Ç–æ–º.")
#             docx_file = FSInputFile(file_path)
#             await message.answer_document(docx_file)
#
#         else:
#             # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
#             file_path = file_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
#             with open(file_path, "w", encoding="utf-8") as file:
#                 file.write(file_content)
#             await message.reply(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω —Ç–µ–∫—Å—Ç–æ–º.")
#             text_file = FSInputFile(file_path)
#             await message.answer_document(text_file)
#
#         # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
#         os.remove(file_path)
#
#     except Exception as e:
#         await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
